{
    "exercises": [
        {
            "id": "workflow",
            "name": "README",
            "title": "What the what is Git?",
            "image": "images/readme.png",
            "description": "A basic overview to using git.",
            "paragraphs": [
              {
                "paragraph1": "As software developers, we use git when working on projects with teammates and making our projects available on Github. Git tracks changes to our files and allows for easy collaboration between multiple users. Additionally, it allows us to continually save drafts of our project. If you ever make some changes and need to revert back to a previous version, git will be your best friend."
              },
              {
                "paragraph2": "In this series of tutorial, you will learn the path that is working with your local files and files stored in GitHub. To begin, and for the sake of explanation, we will jump around a bit. Notice the folder labeled Github Master (top left hand corner). This folder is your project that is available to the public (or private guests) at all times. Additionally, as you and your team continually update your project, this is where the newly updated version of your project will be stored. As you might expect, we want to be sure to only place what you want others to see on the Github Master. Any careless changes would impact the entire project!"
              },
              {
                "paragraph3": "Next, notice the folder labeled Local Master. This will always serve as our starting point on our path towards using git. After all, anything that we store on Github had to built on our computer first. The Local Master is where it all begins. This master version will be worked on only when creating your initial files and folders. As I mentioned previously, the Github Master is the one shared by you and your teammates, so it will be critical to keep a copy of this master version on your computer. In this case, that’s what the Local Master is for. It keeps a master copy of what is available on Github on your local machine. That way, we can be sure to be working on the most up to date version of our project at all times. If we fail to do so, we may end up working on files that are out of date and this will create problems down the road when you try to add in your new code that contains old code people have already removed. "
              },
              {
                "paragraph4": "If you only work by yourself, you could theoretically get by with just using Github Master and Local Master. Once you make changes you are happy with, you can immediately push them up the Github Master for the world to see. But, as we mentioned before, git allows us to work on projects with a team of developers, not to mention the ability to go to back to previous drafts of our project. This brings in the term “branching.” Using a branch serves a variety of useful purposes: checking for any conflicts that might accidentally override something on the master, sharing your proposed changes with your teammates, testing your code on a teammates machine, working on one task at a time to stay organized, etc. "
              },
              {
                "paragraph5": "Let’s check out the folder labeled Local Branch. As mentioned before, a “branch” allows us to work on our project without fear of overriding our public version of the project. It makes a duplicate of the Local Master and allows us to get started on expanding our project, without fear of messing up all of our previous hard work. It is the location where, after all of your files and folders are in place, you will always work on your project. It’s much like a branch off of a tree. It is attached to the tree, but the tree will not die if a branch is trimmed or even removed. We can make all the changes and additions to our project we want without affecting our master version. Additionally, the Github Branch is where your teammates will be able to actually see your proposed changes and test them out for themselves on their local computer."
              },
              {
                "paragraph6": "Lastly, let’s check out Github Branch. As you might suspect, this will simply serve as a copy of our local branch, but it will be used to allow our teammates to take a look at our proposed changes to the project. This is where your team can test your code and make sure it works on their computer, before merging it with the Github Master."
              },
              {
                "paragraph7": "Working with the Github workflow is a like running the bases on a baseball diamond. Local Master is home base and we will always follow the same pattern. You can’t run directly from 1st to 3rd base, you’d be out immediately! We will get our files up in running in the Local Master (home base), work on updates and changes in our Local Branch (first base), push up those changes for our teammates to review in Github Branch (2nd base), merge those changes without Github Master (3rd base), and finally pull down the branch new Github Master into our Local Master (home run). Notice, jumping from Local Branch to Github Master was never mentioned, why? That would take our proposed changes and immediately merge them with our public Github Master. If there was any sort of problems that we missed, you could imagine, that would create some problems. The order in which we move is crucial."
              }
            ]
        },
        {
            "id": "tut0",
            "name": "Tutorial 0",
            "title": "Getting Started",
            "image": "https://media.giphy.com/media/zaezT79s3Ng7C/giphy.gif",
            "description": "Getting started using git, a step by step tutorial.",
            "steps": [
              {
                "stepNum": 1,
                "learn": "When you first begin working on a new project, you will want to get your basic file structure put in place. I have taken the liberty of creating a few essential files and directories (or folders). We are currently inside of a directory called myProject which contains all of these necessary files that will get us started. In this tutorial, I have created a terminal. This the area (to right) is where we will enter all of our commands. These commands seem to have strange names, but they are always shorthand for something.",
                "instructions1": "In this case, we want to see a “list” of all of our fies. To do so, after the $ in the terminal, type in type in “ls” followed by enter. Notice, “ls” is just a shorter way of writing list.",
                "command1": "ls",
                "terminal1": "README.md, css, index.html, javascripts",
                "append1": "Notice in the terminal is now a list of all the files inside of the myProject directory (folder). Inside of the css folder is a main.css file and inside of the javascripts folder is a main.js file.",
                "answer1": "ls"
              },
              {
                "stepNum": 2,
                "learn": "As we continue down the road of getting started, we need to initialize the myProject directory in order to start using git. As I mentioned before, we are already inside of the myProject directory, that's the folder we will initialize.",
                "instructions1": "Go ahead and type in “git init” into the terminal.",
                "command1": "git init",
                "answer1": "git init",
                "terminal1": "Initialized empty Git repository in /Users/myComputer/workspace/myProject/.git/",
                "append1": "Notice that Local Master has now been initialized and we are now able to use git commands.",
                "style1": "#lm"
              },
              {
                "stepNum": 3,
                "learn": "This next step, admittedly, will be the one contradiction to the workflow I will discuss in the upcoming Git Workflow Tutorial. Becuase we are just getting started, we need to give Github something to start with in order to create our project. Unfortunately, Github won’t allow us to start with a completely blank project. So, to make Github happy, we will add, commit, and push up directly from our Local Master to the Github Master, but just this once.<br>What does adding, committing mean? Adding and committing is much like saving a draft of your project. This is really handy if something goes wrong with your project. You can always revert back to a previous commit, if necessary. When committing, you must provide a log message to describe your changes. It’s kind of like hitting Save As, with the ability to write as short or as long as a description as you feel necessary to remember what that commit contains.<br>Adding and committing will appear many times when working with git. It’s kind of like trying to close a text editor and your computer reminding you to save your work before doing so. Git will usually remind you to add and commit, but sometimes it won’t, particularly when first getting started with a project. Committing often is always a good rule of thumb.",
                "instructions1": "1. Let’s add those files and directories mentioned earlier.",
                "command1": "git add .",
                "answer1": "git add .",
                "instructions2": "2. Let's commit our work",
                "command2": "git commit -m \"file structure complete\"",
                "answer2": "git commit -m \"file structure complete\"",
                "terminal2": "check pics on phone",
                "append1": "Note: Once again, it’s important to have descriptive names for each commit. This will be very useful if you need to recover previous work."
              },
              {
                "stepNum": 4,
                "learn": "Lastly, we need to connect our project to a repository on Github and “push” up a copy those files we just committed. Notice, I said it’s pushing a copy, your local files will still stay on your computer, so not to worry. I have taken the liberty of setting us up an account and repository (where our project will be stored) on Github. NOTE: Once again, creating a project from strach is the only time where we will push directly from Local Master to Github Master. We need to push up something to Github in order to make it happy and get our project started. Thankfully, this long remote command is provided to you by Github, so you could simply copy paste it in the future.",
                "instructions1": "1. Let's connect our directory to Github. Type in:",
                "command1": "git remote add origin https://github.com/user/myProject.git",
                "terminal1": "check out phone screenshot<br>",
                "answer1": "git remote add origin https://github.com/user/myProject.git",
                "instructions2": "2. Next, let's push up our Local Master containing all of our files and push it to our Github Master",
                "command2": "git push origin master",
                "terminal2": "check phone",
                "answer2": "git push origin master.",
                "style2": "#gm",
                "removeStyle2": "#lm"
              },
              {
                "stepNum": 5,
                "learn": "What’s up with this remote and origin? Remote allows us to connect our project to a repository on Github. It tells git where to look. Origin refers to where we are pushing the files from. In this case, we are push directly from the Local Master. You are now ready to begin the Tutorial 1 - Github Workflow Overview. Let’s go!"
              }
            ]
        },
        {
            "id": "tut1",
            "name": "Tutorial 1",
            "title": "Github Workflow",
            "image": "images/baseball.png",
            "description": "Here's a tutorial to practice using the Github workflow.",
            "steps": [
              {
                "stepNum": 1,
                "learn": "Picking up where we left on the Getting Started Tutorial, we are now ready to start working on our project, along with our teammates. As mentioned before, branches help us share our work with teammates and work on individual, bite sized tasks.",
                "instructions1": "In this example, let’s work on the navigation bar inside of the index page. We will create a branch and jump into that branch using “checkout.” Type in:",
                "command1": "git checkout -b myNavbar",
                "instructions2": "",
                "command2": "",
                "terminal1": "Switched to a new branch 'myNavbar'",
                "hint": "",
                "append1": "We now have a local branch called myNavbar that we can start working in. Notice that we skipped using “git branch myNavbar” followed by “git checkout myNavbar.” We just combined them into one command. What is checkout? This command simply allows us to switch between branches and the master. We will cover more of this in the next tutorial.",
                "answer1": "git checkout -b myNavbar",
                "styleStart": "#lb",
                "style1": "#lb"
              },
              {
                "stepNum": 2,
                "learn": "Let’s pretend the new navbar is now complete and we are ready to send it up to our Github branch so our team can take a look at it. First, we will need to add and then commit the files. When committing, don’t forget that you must provide a log message, describe what the commit contains.",
                "instructions1": "In this examples, let’s type in: “git add .” “git commit -m “completed the navbar”.",
                "command1": "git add .",
                "instructions2": "Followed by:",
                "command2": "git commit -m \"completed the navbar\"",
                "terminal1": "check out phone screenshot<br>",
                "terminal2": "check out phone",
                "hint": "",
                "answer1": "git add .",
                "answer2": "git commit -m \"completed the navbar\"",
                "append1": "Pro tip: If you ever want to see exactly what files you have modified before adding and committing. Type in “git status” to see a list of the files.",
                "style1": "#lb"
              },
              {
                "stepNum": 3,
                "learn": "Now we are ready to push up the files to our Github Branch.",
                "instructions1": "Type in the command below to push up our files to Github. Notice that the origin refers to the name of the branch. In this case, myNavbar.",
                "command1": "git push origin myNavbar",
                "terminal1": "check out phone screenshot",
                "hint": "",
                "answer1": "git push origin myNavbar",
                "removeStyle1": "#lb",
                "style1": "#gb"
              },
              {
                "stepNum": 4,
                "learn": "Now that your new branch is available for your team to view, you will need to go to Github and create a “pull request.” This allows your team to review your work, pull down a copy of it for themselves to test out, and give it a thumbs up if it works as expected. For our purposes, let’s assume the pull request was successful and your team approved a merge to the Github Master. This merge means that your branch is now a part of the Github Master. Your new navbar is now public!",
                "instructions1": "Now that the Github Master is updated, the next step is to pull down the new master into your Local Master. This is very important. Type in:",
                "command1": "git pull origin master",
                "terminal1": "check out phone screenshot",
                "hint": "",
                "answer1": "git pull origin master",
                "style1": "#lm",
                "removeStyle1": "#gm",
                "preStyle": "#gm",
                "removeOldStyle": "#gb"
              },
              {
                "stepNum": 5,
                "learn": "Last of all, let’s make a new branch in order to start working on a new task.",
                "instructions1": " This time let’s say we are going to be working on the footer. Type in:",
                "command1": "git checkout -b myFooter",
                "terminal1": "Switched to a new branch 'myFooter'",
                "hint": "",
                "answer1": "git checkout -b myFooter",
                "style1": "#lb",
                "removeStyle1": "#lm"
              },
              {
                "stepNum": 6,
                "learn": "Great work! Let’s do a quick review of everything we’ve covered so far. For the sake of review, let’s once again pretend we will be working on updating the Navbar. Remember, the flow of using git/github is like rounding the bases of a baseball diamond. Local Master is homebase, the Local Branch is 1st base, Github Branch is 2nd base, Github Master is 3rd base, and once you pull down that updated directory onto your Local Master, you’ve hit a homerun. Remember, before you can be work, you must always create a new branch.",
                "instructions1": "1. Before we begin working on the Navbar, we must create a branch. Type in:",
                "command1": "git checkout -b myNavbar",
                "terminal1": "Switched to a new branch 'myNavbar'<br>",
                "append1": "We now have a local branch called myNavbar that we can start working in. Notice that we skipped using “git branch myNavbar” followed by “git checkout myNavbar.” We just combined them into one command.",
                "instructions2": "2. The Navbar is now complete. Let’s add our work.",
                "command2": "git ",
                "command2": "git add .",
                "terminal2": "check screenshots term 2<br>",
                "instructions3": "3. Now commit it.",
                "command3": "commit -m \"completed the navbar\"",
                "terminal3": "check screenshots term 3<br>",
                "instructions4": "4. Next, let’s push up our branch so our teammates can take a look, and review our work before merging it with the Github Master. We will pretend that you have made a pull request on the Github website. Type in the command below. Notice that the origin refers to the name of the branch. In this case, myNavbar.",
                "command4": "git push origin myNavbar",
                "terminal4": "check out phone screenshot term 4<br>",
                "instructions5": "5. Let’s assume that everything looked great and the merge was successful. We are now ready to update our Local Master with the most up to date version of our project. Type in:",
                "command5": "git pull origin master",
                "terminal5": "check out phone screenshot term 5<br>",
                "instructions6": "6. As always, the final step is to make a new branch off of the Local Master. That way we don’t accidentally override our now updated master. Let’s once again pretend that our next task will be to build a footer for the page. Type in:",
                "command6": "git checkout -b myFooter",
                "terminal6": "Switched to a new branch 'myFooter'",
                "hint": "",
                "answer1": "git checkout -b myNavbar",
                "answer2": "git add .",
                "answer3": "git commit -m \"completed the navbar\"",
                "answer4": "git push origin myNavbar",
                "answer5": "git pull origin master",
                "answer6": "git checkout -b myFooter",
                "style1": "#lb",
                "style2": "#lb",
                "style3": "#lb",
                "style4": "#gb",
                "style5": "#lm",
                "style6": "#lb",
                "removeStyle4": "#lb",
                "removeStyle5": "#gm",
                "removeStyle6": "#lm",
                "preStyle4": "#gm",
                "removeOldStyle4": "#gb"
              }
            ]
        },
        {
            "id": "challenge1",
            "name": "Challenge 1",
            "title": "Github Workflow Challenge",
            "image": "images/challenge1.png",
            "description": "Let's test your knowledge of the Github workflow.",
            "steps": [
              {
                "stepNum": 1,
                "learn": "You will be tasked with completing the following task, with appropriate commands, and in the appropriate order. If you get stuck, hover over the ? icon in the upper right hand corner. You’ve been working in a new branch named “myHomepage” and have made several edits to the files inside your project. In this example, let’s say you finished building the navbar and did some basic styling, commit it, and continue through the rest of the workflow path.",
                "instructions1": "1.",
                "command1": "Add your files",
                "terminal1": "",
                "hint1": "git add .",
                "answer1": "git add .",
                "append1": "",
                "styleStart": "#lb",
                "instructions2": "2.",
                "command2": "Use the log message - \"completed page layout\"",
                "terminal2": "modified: index.html; main.css???<br>",
                "hint2": "git commit -m \"completed page layout\"",
                "answer2": "git commit -m \"completed page layout\"",
                "instructions3": "3.",
                "command3": "Use the branch name, myHomepage",
                "terminal3": "get screen shot",
                "hint3": "git push origin myHomepage",
                "answer3": "git push origin myHomepage",
                "style3": "#gb",
                "removeStyle3": "#lb"
              },
              {
                "stepNum": 2,
                "learn": "Let’s once again image you have created a pull request on Github, your team has checked out your code, approved it, and your Github Master is now up to date with the approved changes. Type in your next steps to complete the workflow. Let's pretend that the next step will be to create a company history page, our new branch name should reflect that.",
                "instructions1": "1.",
                "command1": "pull down your files into your local master",
                "terminal1": "check screen shots<br>",
                "hint1": "git pull origin master",
                "answer1": "git pull origin master",
                "append1": "",
                "style1": "#lm",
                "removeStyle1": "#gm",
                "instructions2": "2.",
                "command2": "Checkout and create a branch called companyHistory",
                "terminal2": "Switched to a new branch 'companyHistory'",
                "hint2": "git checkout -b companyHistory",
                "answer2": "git checkout -b companyHistory",
                "style2": "#lb",
                "removeStyle2": "#lm",
                "preStyle": "#gm",
                "removeOldStyle": "#gb"
              }
            ]
        },
        {
            "id": "tut2",
            "name": "Tutorial 2",
            "title": "Git Checkout",
            "image": "images/checkout.png",
            "description": "A tutorial to cover using git checkout and how it works",
            "steps": [
              {
                "stepNum": 1,
                "learn": "Checkout is used to switch between any of your branches or to your local master. Confusion often lies when checking out to the master or your branches, without adding and committing beforehand. This tutorial aims to clear up some of this confusion and give you some real world context.",
                "instructions1": "Let’s say you’ve been working on a branch for a while. You have a few files inside of that branch that have been modified. Let’s take a look and see what files in particular have changed. Type in the command below into the terminal1 and hit enter",
                "command1": "git status",
                "terminal1": "modified: index.html, css/main.css",
                "hint": "",
                "answer1": "git status",
                "append1": "",
                "style1": "#lb",
                "styleStart": "#lb"
              },
              {
                "stepNum": 2,
                "learn": "We see that index.html and main.css are a part of my Local Branch, in this case, we have called it myBranch. Now, let’s checkout to the master and see what happens to the files.",
                "instructions1": "For the sake of example, we will purposely not add or commit these files. Type in:",
                "command1": "git checkout master",
                "terminal1": "check phone screen shot term1<br>",
                "instructions2": "Next, let's take a look at the files",
                "command2": "git status",
                "terminal2": "modified: index.html, css/main.css<br>",
                "hint": "",
                "answer1": "git checkout master",
                "answer2": "git status",
                "append1": "Notice how these same files are now moved over to our Local Master. As you might expect, this could create some problems if we added and committed these changes to the master instead of to the branch we wanted to push to Github.",
                "style1": "#lm",
                "removeStyle1": "#lb"
              },
              {
                "stepNum": 3,
                "learn": "One advantage that git will offer you, if there are conflicts that would occur during the checkout, it will warn you. It will say something like: ///error: Your local changes to the following files would be overwritten by checkout: index.html css/main.css Please commit your changes or stash them before you switch branches. Aborting/// This git error will often save you some headache, but this tutorial is to show you what to do when that error is not given. Notice that we are now in the Local Master with some files we need to commit elsewhere. We need to move back to our branch and commit them there, not in our master.",
                "instructions1": " Type in the command below, notice the files will follow you back to myBranch.",
                "command1": "git checkout myBranch",
                "terminal1": "not sure about this one",
                "hint": "",
                "answer1": "git checkout myBranch",
                "style1": "#lb",
                "removeStyle1": "#lm"
              },
              {
                "stepNum": 4,
                "learn": " Notice how we were able to commit those files in either location. Whenever we changed locations, the files came with. We could also create a new branch entirely and those same files will follow us, waiting to be committed. Node: this idea that files will follow if you don’t commit is important to remember for your next task.",
                "terminal1": "",
                "hint": "",
                "answer1": ""
              }
            ]
        },
        {
            "id": "challenge2",
            "name": "Challenge 2",
            "title": "Checkout Challenge",
            "image": "images/challenge2.png",
            "description": "Let's text your knowledge of using git checkout in a real life setting.",
            "steps": [
              {
                "stepNum": 1,
                "learn": "You will be tasked with completing the following task, with appropriate commands, and in the appropriate order. If you get stuck, hover over the ? icon in the upper right hand corner. You’ve been working on your project for a while now and just realized you’ve been working on the master by mistake! Notice that these files are currently located inside of the Local Master. You need to push these changes up to Github. Resolve this issue and then push up your changes to Github.",
                "instructions1": "1.",
                "command1": "1. Use myHomepage",
                "terminal1": "Switched to a new branch 'myHomepage'",
                "hint1": "git checkout -b myHomepage",
                "answer1": "git checkout -b myHomepage",
                "append1": "",
                "styleStart": "#lm",
                "removeStyle1": "#lm",
                "style1": "#lb",
                "instructions2": "2.",
                "command2": "2.",
                "hint2": "git add .",
                "answer2": "git add .",
                "instructions3": "3.",
                "command3": "3. Use \"building splash page\"",
                "terminal3": "modified: index.html, css/main.css, javascripts/main.js<br>",
                "hint3": "git commit -m \"building splash page\"",
                "answer3": "git commit -m \"building splash page\"",
                "instructions4": "4.",
                "command4": "4. Use myHomepage",
                "terminal4": "Check screenshot",
                "hint4": "git push origin myHomepage",
                "answer4": "git push origin myHomepage",
                "style4": "#gb",
                "removeStyle4": "#lb"
              },
              {
                "stepNum": 2,
                "learn": "Let’s once again image you have created a pull request on Github, your team has checked out your code and approved your code, and your Github Master is now up to date with the approved changes. Type in your next steps to complete the workflow. Let's pretend that the next step will be to create a company history page",
                "instructions1": "1.",
                "command1": "pull down your files into your local master",
                "terminal1": "check screen shots<br>",
                "hint1": "git pull origin master",
                "answer1": "git pull origin master",
                "append1": "",
                "style1": "#lm",
                "removeStyle1": "#gm",
                "instructions2": "2.",
                "command2": "Checkout and create a branch called companyHistory",
                "terminal2": "Switched to a new branch 'companyHistory'",
                "hint2": "git checkout -b companyHistory",
                "answer2": "git checkout -b companyHistory",
                "style2": "#lb",
                "removeStyle2": "#lm",
                "preStyle": "#gm",
                "removeOldStyle": "#gb"
              }
            ]
        },
        {
            "id": "tut3",
            "name": "Tutorial 3",
            "title": "Testing A Teammates Code",
            "image": "images/bugs.jpg",
            "description": "A tutorial to learn how to test your teammates code.",
            "steps": [
                {
                    "stepNum": 1,
                    "learn": "It’s now time to learn how to actually test another teammates code before they merge it with the master. For this exercise, let’s assume that your teammate has already pushed up their branch to Github and they made a pull request. Thankfully, all we need to know is the name of their branch in order to pull it down and check it out for ourselves. Your teammate has been working on styling the page and has made a few changes to the css file, his branch is called JohnStyling. We have been working on a branch of our own for a while, so we’ll need to checkout to a new branch to take a look at John’s work.",
                    "instructions1": "1. To avoid any conflicts and to keep things simple. I recommend testing in a new branch with the same name as your teammates branch. I find it easier to keep things organized this way. Before we create a new branch, let’s save our work. Type in:",
                    "command1": "git add .",
                    "instructions2": "2. Next, let's commit our work. For this example, let's say we are in the middle of building a splash page for when users first visit our site. Type in:",
                    "command2": "git commit -m \"building splash page\"",
                    "terminal2": "2 files changed, 52 insertions(+)",
                    "hint": "",
                    "answer1": "git add .",
                    "answer2": "git commit -m \"building splash page\"",
                    "style1": "#lb",
                    "styleStart": "#lb"
                },
                {
                    "stepNum": 2,
                    "learn": "Next, let’s make that new branch to store the branch that we will be testing. Once again, let’s name it the same name as our teammates. If you recall, John’s branch is called JohnStyling.",
                    "instructions1": "Type in:",
                    "command1": "git checkout -b JohnStyling",
                    "command2": "",
                    "terminal1": "Switched to a new branch 'JohnStyling'",
                    "append1": "We have now pulled down a copy of JohnStyling to test it out.",
                    "answer1": "git checkout -b JohnStyling",
                    "style1": "#lb"
                },
                {
                    "stepNum": 3,
                    "learn": "Notice that we now have a new branch called JohnStyling. There’s nothing in it just yet. Our old branch, myBranch, is still there.",
                    "instructions1": "Now, let’s pull down John’s branch and test it. Type in:",
                    "command1": "git pull origin JohnStyling",
                    "command2": "",
                    "terminal1": "From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore",
                    "append1": "We have now pulled down a copy of JohnStyling to test it out.",
                    "answer1": "git pull origin JohnStyling",
                    "style1": "#lb"
                },
                {
                    "stepNum": 4,
                    "learn": "Nice work. Let’s now pretend that you’ve tested John’s code on your local machine and things are looking great. This is when you would give his code a thumbs up on Github, make sure all your other teammates have tested the code, and merge the pull request with your Github Master.",
                    "instructions1": "1. Let’s pull down the Github Master to your Local Master. We have to do something first before we can pull down the new version. We need to checkout to the master. Type in:",
                    "command1": "git checkout master",
                    "instructions2": "2. We are now ready to pull down the files into our master. Type in:",
                    "command2": "git pull origin master",
                    "terminal1": "Switched to branch 'master'<br>",
                    "answer1": "git checkout master",
                    "answer2": "git pull origin master",
                    "terminal2": "From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore",
                    "style1": "#lm",
                    "removeStyle1": "#lb"
                },
                {
                    "stepNum": 5,
                    "learn": "The next step is an important step. Remember, we were working on our branch and committed some files in that folder before we started testing John’s code. We want to continue to work on that branch after the testing is complete, and be sure to include the new updates we just merged into our Github Master.",
                    "instructions1": "Let’s check back out to myBranch. Type in:",
                    "command1": "git checkout myBranch",
                    "command2": "",
                    "terminal1": "Switched to branch 'myBranch'",
                    "answer1": "git checkout myBranch",
                    "style1": "#lb",
                    "removeStyle1": "#lm"
                },
                {
                    "stepNum": 6,
                    "learn": "In the future, you will undoubtedly encounter what are called merge conflicts. These occur when code on the branch conflicts with code saved on the master. The process of keeping your branch continually up to date with changes to the master can save you some headache down the road. There may be the occasional conflict, but resolving them early is the best policy.",
                    "instructions1": "Now, let’s apply this new updated master into our branch we have been working. Type in:",
                    "command1": "git merge master",
                    "command2": "",
                    "terminal1": "Updating 123456a..b789876<br>Fast-forward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore",
                    "answer1": "git merge master",
                    "style1": "#lb"
                },
                {
                    "stepNum": 7,
                    "learn": "We are back to working in myBranch and we also have all those new updates we just merged into our master.",
                    "instructions1": "For our last step, let’s go ahead and delete the JohnStyling branch, so we don’t need it anymore. Type in:",
                    "command1": "git branch -D JohnStyling",
                    "command2": "",
                    "append1": "Notice, the JohnStyling branch has been removed. Seem like a lot to remember? Let’s move on the next challenge for both review, and to sharpen your skills.",
                    "terminal1": "Deleted branch JohnStyling",
                    "answer1": "git branch -D JohnStyling",
                    "style1": "#lb"
                }
            ]
        },
        {
            "id": "challenge3",
            "name": "Challenge 3",
            "title": "Testing A Teammates Code Challenge",
            "image": "images/challenge3.png",
            "description": "Test your knowledge of how to test a teammates code.",
            "steps": [
              {
                "stepNum": 1,
                "learn": "You will be tasked with completing the following task, with appropriate commands, and in the appropriate order. This challenge will be in two parts. Once with some light cues to help you remember the necessary commands, and another pass with no cues. If you get stuck, hover over the ? icon in the upper right hand corner. You have been working in your branch and now you need to pull down someone else’s code to test it and make sure it works properly. Don’t forgot to commit your changes before making a new branch. Afterwards, be sure to merge your branch with the new master. Let’s use John’s branch from before, titled JohnStyling.",
                "instructions1": "1. Create a new and checkout into a new branch.",
                "command1": "Use JohnStyling",
                "terminal1": "Switched to a new branch 'JohnStyling'<br>",
                "hint1": "git checkout -b JohnStyling",
                "answer1": "git checkout -b JohnStyling",
                "append1": "",
                "styleStart": "#lb",
                "instructions2": "2.",
                "command2": "Grab a copy of John's code.",
                "hint2": "git pull origin JohnStyling",
                "answer2": "git pull origin JohnStyling",
                "terminal2": "From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore"
              },
              {
                "stepNum": 2,
                "learn": "John’s code looks great. Let’s pretend that you gave him a thumbs up on Github and your team just merged the code into your Github Master.",
                "instructions1": "1. Now, let’s go back to our master and pull down the new master.",
                "command1": "Switch to your master",
                "terminal1": "Switched to branch 'master'<br>",
                "hint1": "git checkout master",
                "answer1": "git checkout master",
                "append1": "",
                "style1": "#lm",
                "instructions2": "2.",
                "command2": "Pull down the new master",
                "terminal2": "From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore",
                "hint2": "git pull origin master",
                "answer2": "git pull origin master",
                "style2": "#lm",
                "removeStyle2": "#gm",
                "preStyle": "#gm",
                "removeOldStyle": "#lb"
              },
              {
                "stepNum": 3,
                "learn": "Let’s go back to our old branch we were just working in and update it with our new master. Afterwards, go ahead and delete John’s branch, since we won’t need it anymore.",
                "instructions1": "1. Switch to your old branch",
                "command1": "Old branch was called myBranch",
                "answer1": "git checkout myBranch",
                "terminal1": "Switched to a new branch 'myBranch'<br>",
                "hint1": "git checkout myBranch",
                "style1": "#lb",
                "removeStyle1": "#lm",
                "instructions2": "2.",
                "command2": "Update your branch with the new master",
                "terminal2": "Updating 123456a..b789876<br>Fast-forward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore<br>",
                "hint2": "git merge master",
                "answer2": "git merge master",
                "instructions3": "3.",
                "command3": "Delete John's old 'JohnStyling' branch",
                "answer3": "git branch -D JohnStyling",
                "hint3": "git branch -D JohnStyling",
                "terminal3": "Deleted branch JohnStyling",
                "preStyle": "#lm"
              }
            ]
        }
    ]
}
